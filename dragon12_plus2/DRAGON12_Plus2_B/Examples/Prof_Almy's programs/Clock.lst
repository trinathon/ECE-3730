
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;
                        ; clock -- An alarm clock example
                        ;   Author - Tom Almy
                        ;   Date - February 2003
                        ;
                        ;   NOTE - DIP Switches must be up (open)
                        ;    Switch SW2 -- toggles alarm arming (indicated by right decimal point LED), also
                        ;    stops the alarm (without disarming) if it is sounding. Also used to view alarm
                        ;    time and (when held down) will allow setting the alarm time.
                        ;    Switch SW3 -- Depress and hold while setting the time.
                        ;    Switch SW4 -- In combination with SW2 sets the alarm hour and with SW3 set the time hour
                        ;    Switch SW5 -- In combination with SW2 sets the alarm minute and with SW3 sets the alarm hour
                        ; Setting the time minutes or hours will also reset the internal seconds counter to zero. The
                        ; buttons are debounced and the hour/minute setting have auto-repeat every half second.
                        ; The Left decimal point LED indicates "pm". The center decimal point LEDs flash once per second.
                        ; The right decimal point LED indicates the alarm is armed.
0000                    AMPM            equ     0       ; Comment out for a 24 hour clock (no AM/PM indication)
                        #include        registers.inc   ; include register equates and memory map
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed. 
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND   
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        ;
0010                    MULTI_MODE      equ     $10
0000                    SINGLE_MODE     equ     0
0020                    SCAN_MODE       equ     $20
0000                    NO_SCAN_MODE    equ     0
0007                    CHANNEL_NUM:    equ     7       ; reading input from AN07
                        
0008                    ALARM_SW        equ     %1000   ; Alarm switch (0 if depressed)
0004                    TIME_SW         equ     %100    ; Time set switch (0 if depressed)
0002                    HOUR_SW         equ     %10     ; Hour switch (0 if depressed)
0001                    MINUTE_SW       equ     %1      ; Minute Switch (0 if depressed)
                        
                        
5dc0                    TB1MS:  equ     24000           ; 1ms time base of 24,000 instruction cycles
                        ;                               ; 24,000 x 1/24MHz = 1ms at 24 MHz bus speed
                        
1000                            org     DATASTART
                        ;
1000                    select:         rmb     1       ; current digit being displayed
1001                    disptn:         rmb     4       ; Normal display digits
1005                    dispdp:         rmb     4       ; decimal point display digits
1005                    normalpm:       equ     dispdp
1006                    flashsec        equ     dispdp+1
1007                    flashsec2       equ     dispdp+2
1008                    alarmon         equ     dispdp+3
1009                    dispta:         rmb     4       ; alarm display digits
100d                    dispadp:        rmb     4       ;  decimal point display for alarm
100d                    alarmpm:        equ     dispadp
1010                    alarmon2:       equ     dispadp+3 
1011                    milisecs        rmb     2       ; Millisecond counter (reset every second)
1013                    seconds         rmb     1       ; Seconds counter, reset every minute
1014                    debounce        rmb     1       ; time for debounce
1015                    lastbuttons     rmb     1       ; last button values
1016                    repeat          rmb     2       ; repeat time
1018                    brtness:        rmb     1
1019                    isoff:          rmb     1
101a                    buzzing:        rmb     1
                        
                        ;
                        ; Segment conversion table:
                        ;
                        ; Binary number:                0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
                        ; Converted to 7-segment char:  0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
                        ;
                        ; Binary number:                $10,$11,$12,$13,$14,$15,$16,$17
                        ; Converted to 7-segment char:   G   H   h   J   L   n   o   o
                        ;
                        ; Binary number:                $18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20
                        ; Converted to 7-segment char:   P   r   t   U   u   y   _  --  Blank
                        ;
                        
2000                            org     PRSTART
                        ;
2000 06 20 32                   jmp     start
2003                    segm_ptrn:                                              ; segment pattern
2003 3f 06 5b 4f 66 6d          fcb     $3f,$06,$5b,$4f,$66,$6d,$7d,$07         ; 0-7
     7d 07
                        ;                0,  1,  2,  3,  4,  5,  6,  7
200b 7f 6f 77 7c 39 5e          fcb     $7f,$6f,$77,$7c,$39,$5e,$79,$71         ; 8-$0f
     79 71
                        ;                8,  9,  A,  b,  C,  d,  E,  F
2013 3d 76 74 1e 38 54          fcb     $3d,$76,$74,$1e,$38,$54,$63,$5c         ; 10-17
     63 5c
                        ;                G,  H,  h,  J   L   n   o   o
201b 73 50 78 3e 1c 6e          fcb     $73,$50,$78,$3e,$1c,$6e,$08,$40         ; 18-1f
     08 40
                        ;                P,  r,  t,  U,  u   Y   -   -
2023 00 01 48 41 09 49          fcb     $00,$01,$48,$41,$09,$49                 ; 20-23
                        ;               blk, -,  =,  =,  =,  =
                        ;
                        ;
                        ; this routine will read adc input on the pin AN07 and store the result at adr07h
                        ;
                        ;
2029                    adc_conv:
2029 8b 00                      adda    #SINGLE_MODE+NO_SCAN_MODE
                        ;
                        ; if you want to read multi-channel input, change above statement to
                        ;       adda    #MULTI_MODE+NO_SCAN_MODE
                        ;
202b 5a 85                      staa    ATD0CTL5
202d                    not_ready:
202d 4f 86 80 fc                brclr   ATD0STAT $80 not_ready
2031 3d                         rts
                        
2032                    start:
2032 cf 20 00                   lds     #DATAEND
                        #ifdef INITIALIZEVECTORS
2035 18 03 20 b5 3e 64          movw    #timer5,UserTimerCh5    ; initialize the int vector
203b 18 03 20 c0 3e 62          movw    #timer6,UserTimerCh6    ; initialize the int vector
2041 18 03 21 10 3e 60          movw    #timer7,UserTimerCh7    ; initialize the int vector
                        #endif
                        
2047 86 ff                      ldaa    #$ff            ; turn off 7-segment display
2049 7a 02 58                   staa    PTP             ; portp = 11111111
                        ;
204c 5a 03                      staa    DDRB            ; portb = output
204e 7a 02 5a                   staa    DDRP            ; portp = output
2051 79 02 62                   clr     DDRH            ; porth = input
                        
2054 86 80                      ldaa    #$80
2056 5a 46                      staa    TSCR            ; enable timer
2058 86 e0                      ldaa    #$E0
205a 5a 40                      staa    TIOS            ; select t5, t6, t7 as an output compares
205c 5a 4c                      staa    TMSK1
205e 4c 48 04                   bset    tctl1,#$4       ; t5 in toggle mode
2061 4c 48 08                   bset    tctl1,#$8       ; turn off alarm sound
                        
2064 4c 82 80                   bset    ATD0CTL2 $80    ; enable adc operation
2067 4c 83 40                   bset    ATD0CTL3 $40    ; 8 conversion needed for an07
                        
206a 79 10 19                   clr     isoff
206d 79 10 00                   clr     select
2070 18 0b ff 10 18             movb    #$ff,brtness
2075 86 20                      ldaa    #$20
2077 ce 10 01                   ldx     #disptn         ; flashing 8s on display
207a 6a 30                      staa    1,x+            ; reset to flashing 8s
207c 6a 30                      staa    1,x+
207e 6a 30                      staa    1,x+
2080 6a 30                      staa    1,x+
2082 69 30                      clr     1,x+            ; clear the status decimal points
2084 69 30                      clr     1,x+
2086 69 30                      clr     1,x+
2088 69 30                      clr     1,x+
208a ce 10 09                   ldx     #dispta
208d 18 08 30 01                movb    #1,1,x+         ; 12:00 is setting for alarm
2091 18 08 30 02                movb    #2,1,x+
2095 86 0b                      ldaa    #11             ; 0 in alarm minutes and decimal points, milliseconds, seconds
2097 69 30              l1:     clr     1,x+
2099 04 30 fb                   dbne    a,l1
209c 18 03 80 80 10 0e          movw    #$8080,dispadp+1        ; show static colon in alarm time
20a2 79 10 1a                   clr     buzzing
                                
20a5 10 ef                      cli
                        ;
20a7 86 07              begin:  ldaa    #CHANNEL_NUM    ; set channel number before calling 
20a9 16 20 29                   jsr     adc_conv        
20ac 18 0c 00 9e 10 18          movb    ADR07H,brtness
20b2 06 20 a7                   jmp     begin
                        
20b5                    timer5:
                                ; speaker
20b5 4d 4e df                   bclr    TFLG1,#~$20     ; clear flag
20b8 cc bb 80                   ldd     #TB1MS*2
20bb d3 5a                      addd    TC5
20bd 5c 5a                      std     TC5
20bf 0b                         rti
                        
20c0                    timer6:
                                ; Timer 6 keeps display refreshed
                        
20c0 4d 4e bf                   bclr    TFLG1,#~$40     ; clear flag
20c3 71 10 19                   com     isoff
20c6 27 3b                      beq     noton
20c8 cc 5d c0                   ldd     #TB1MS          ; reload the count for 1 ms time base
20cb d3 5c                      addd    TC6     
20cd 5c 5c                      std     TC6
20cf 10 ef                      cli                     ; allow other interrupts to occur 
20d1 f6 10 00                   ldab    select
20d4 52                         incb
20d5 c4 03                      andb    #3
20d7 7b 10 00                   stab    select
20da b7 15                      tfr     b,x             ; select value in X
20dc b6 02 58                   ldaa    PTP             ; only alter port p bits we are using
20df 84 f0                      anda    #$f0
20e1 aa e2 22 c3                oraa    dspmap,x
20e5 7a 02 58                   staa    PTP
20e8 1f 02 60 08 06             brclr   PTH,ALARM_SW,dispalarm  ; display alarm time?
20ed 1a e2 10 01                leax    disptn,x
20f1 20 04                      bra     dispnorm
20f3 1a e2 10 09        dispalarm: leax dispta,x
20f7                    dispnorm:
20f7 a6 00                      ldaa    0,x
20f9 cd 20 03                   ldy     #segm_ptrn
20fc a6 ec                      ldaa    a,y             ; get converted value
20fe aa 04                      oraa    4,x             ; set dp if required
2100 5a 01                      staa    PORTB
2102 0b                         rti
2103 79 00 01           noton:  clr     PORTB
2106 b6 10 18                   ldaa    brtness
2109 c6 ff                      ldab    #$ff
210b d3 5c                      addd    TC6
210d 5c 5c                      std     TC6
210f 0b                         rti
                        
2110                    timer7: 
                                ; Timer 7 runs handles the user interface and updates the time
2110 4d 4e 7f                   bclr    TFLG1,#~$80
2113 cc 5d c0                   ldd     #TB1MS
2116 d3 5e                      addd    TC7
2118 5c 5e                      std     TC7
211a 10 ef                      cli                     ; allow other interrupts to occur
211c fe 10 11                   ldx     milisecs
211f 08                         inx                     ; increment miliseconds
2120 7e 10 11                   stx     milisecs
2123 8e 01 f4                   cpx     #500
2126 27 26                      beq     halfsec
2128 8e 03 e8                   cpx     #1000           ; on the second
212b 26 42                      bne     noflash         ; no -- handle buttons
212d                    secactivity:
212d 18 03 00 00 10 11          movw    #0,milisecs
2133 72 10 13                   inc     seconds
2136 b6 10 13                   ldaa    seconds
2139 81 3c                      cmpa    #60             ; Update minute display
213b 26 11                      bne     halfsec         ; no -- do half second activity
213d 79 10 13                   clr     seconds
2140 ce 10 01                   ldx     #disptn
2143 16 22 8f                   jsr     incrementM      ; increment minute
2146 26 03                      bne     tcheck          ; returns having set CCR on minutes
2148 16 22 a0                   jsr     incrementH      ; increment hours
214b 16 22 46           tcheck: jsr     alarmcheck      ; check alarm every minute after correcting time
214e ce 10 01           halfsec: ldx    #disptn
2151 a6 05                      ldaa    flashsec-disptn,x ; do flashing
2153 88 80                      eora    #$80
2155 6a 05                      staa    flashsec-disptn,x
2157 6a 06                      staa    flashsec2-disptn,x
2159 b6 10 01                   ldaa    disptn          ; check to see if blank or 8
215c 81 20                      cmpa    #$20
215e 27 04                      beq     flash
2160 81 08                      cmpa    #$08
2162 26 0b                      bne     noflash
2164 c6 04              flash:  ldab    #4              ; flash the display
2166 a6 00              flashl: ldaa    0,x
2168 88 28                      eora    #$28
216a 6a 30                      staa    1,x+
216c 04 31 f7                   dbne    b,flashl
                        ; handle buttons
216f b6 02 60           noflash: ldaa   PTH             ; get port h (button) value
2172 b1 10 15                   cmpa    lastbuttons     ; changed value?
2175 27 0f                      beq     nochange
2177 7a 10 15                   staa    lastbuttons     ; new buttons
217a 18 0b 0a 10 14             movb    #10,debounce    ; Do something after 10 counts
217f 18 03 ff ff 10 16          movw    #-1,repeat      ; Signify first entry
2185 0b                         rti
2186 f6 10 14           nochange: ldab  debounce        ; are we debouncing
2189 27 05                      beq     nobounce        ; zero if not
218b 53                         decb
218c 7b 10 14                   stab    debounce        ; wait for debouncing period to be over
218f 0b                         rti
2190 84 0f              nobounce: anda  #$0f            ; only look at bottom switches
2192 81 0a                      cmpa    #15-TIME_SW-MINUTE_SW   ; Minute time?
2194 26 26                      bne     notmintime
2196 fe 10 16                   ldx     repeat
2199 8e 00 00                   cpx     #0
219c 2f 05                      ble     processmintime
219e 09                         dex
219f 7e 10 16                   stx     repeat
21a2 0b                         rti
21a3                    processmintime:
21a3 18 03 01 f4 10 16          movw    #500,repeat     ; delay until repeat
21a9 ce 10 01                   ldx     #disptn
21ac 16 22 7a                   jsr     powoncheck
21af 79 10 13                   clr     seconds
21b2 18 03 00 00 10 11          movw    #0,milisecs
21b8 16 22 8f                   jsr     incrementM
21bb 0b                         rti
21bc                    notmintime:
21bc 81 09                      cmpa    #15-TIME_SW-HOUR_SW     ; Hour time?
21be 26 26                      bne     nothourtime
21c0 fe 10 16                   ldx     repeat
21c3 8e 00 00                   cpx     #0
21c6 2f 05                      ble     processhourtime
21c8 09                         dex
21c9 7e 10 16                   stx     repeat
21cc 0b                         rti
21cd                    processhourtime:
21cd 18 03 01 f4 10 16          movw    #500,repeat     ; delay until repeat
21d3 ce 10 01                   ldx     #disptn
21d6 16 22 7a                   jsr     powoncheck
21d9 79 10 13                   clr     seconds
21dc 18 03 00 00 10 11          movw    #0,milisecs
21e2 16 22 a0                   jsr     incrementH
21e5 0b                         rti
21e6                    nothourtime:
21e6 81 06                      cmpa    #15-ALARM_SW-MINUTE_SW  ; Minute alarm?
21e8 26 1a                      bne     notminalarm
21ea fe 10 16                   ldx     repeat
21ed 8e 00 00                   cpx     #0
21f0 2f 05                      ble     processminalarm
21f2 09                         dex
21f3 7e 10 16                   stx     repeat
21f6 0b                         rti
21f7                    processminalarm:
21f7 18 03 01 f4 10 16          movw    #500,repeat     ; delay until repeat
21fd ce 10 09                   ldx     #dispta
2200 16 22 8f                   jsr     incrementM
2203 0b                         rti
2204                    notminalarm:
2204 81 05                      cmpa    #15-ALARM_SW-HOUR_SW    ; Hour alarm?
2206 26 1a                      bne     nothouralarm
2208 fe 10 16                   ldx     repeat
220b 8e 00 00                   cpx     #0
220e 2f 05                      ble     processhouralarm
2210 09                         dex
2211 7e 10 16                   stx     repeat
2214 0b                         rti
2215                    processhouralarm:
2215 18 03 01 f4 10 16          movw    #500,repeat     ; delay until repeat
221b ce 10 09                   ldx     #dispta
221e 16 22 a0                   jsr     incrementH
2221 0b                         rti
2222                    nothouralarm:
2222 81 07                      cmpa    #15-ALARM_SW    ; just the alarm button
2224 26 1f                      bne     nobutton
2226 fe 10 16                   ldx     repeat          ; don't allow repeats
2229 2c 1a                      bge     nobutton
222b 18 03 00 00 10 16          movw    #0,repeat       ; only one performance
2231 f7 10 1a                   tst     buzzing         ; is it buzzing?
2234 26 0c                      bne     killbuzz
2236 b6 10 08                   ldaa    alarmon         ; else toggle alarm
2239 88 80                      eora    #$80
223b 7a 10 08                   staa    alarmon
223e 7a 10 10                   staa    alarmon2
2241 0b                         rti
2242                    killbuzz:
2242 16 22 73                   jsr     alarmoff
                                
2245                    nobutton:
2245 0b                         rti
                        
2246                    alarmcheck:
2246 f7 10 08                   tst     alarmon
2249 27 28                      beq     alarmoff        ; if alarm is turned off, make sure sound is off
224b cd 10 09                   ldy     #dispta
224e a6 30                      ldaa    1,x+
2250 a1 70                      cmpa    1,y+
2252 26 1f                      bne     alarmoff
2254 a6 30                      ldaa    1,x+
2256 a1 70                      cmpa    1,y+
2258 26 19                      bne     alarmoff
225a a6 30                      ldaa    1,x+
225c a1 70                      cmpa    1,y+
225e 26 13                      bne     alarmoff
                        #ifdef AMPM
2260 a6 30                      ldaa    1,x+
2262 a1 70                      cmpa    1,y+
2264 26 0d                      bne     alarmoff
                        #endif
2266 a6 00                      ldaa    0,x
2268 a1 40                      cmpa    0,y
226a 26 07                      bne     alarmoff
226c                    alarmsound:
226c 4d 48 08                   bclr    TCTL1,#$8       ; turn on alarm sound
226f 72 10 1a                   inc     buzzing
2272 3d                         rts
2273                    alarmoff:
2273 4c 48 08                   bset    TCTL1,#$8       ; turn off alarm sound
2276 79 10 1a                   clr     buzzing
2279 3d                         rts
                                
227a                    powoncheck:			; Resets time if flashing 8's
227a a6 00                      ldaa    0,x
227c 81 08                      cmpa    #8
227e 27 04                      beq     pon2
2280 81 20                      cmpa    #$20
2282 26 0a                      bne     pon3
2284                    pon2:   
                        #ifdef AMPM
2284 18 00 00 00 01             movw    #1,0,x
                        #else
                                movw    #0,0,x
                        #endif
2289 18 00 02 00 00             movw    #0,2,x
228e 3d                 pon3:   rts
                        
228f                    incrementM:			; Increment the minute value
                        				; X has address of buffer for time display or alarm display
228f ec 02                      ldd     2,x             ; get minute value into A:B
2291 52                         incb
2292 c1 0a                      cmpb    #10
2294 26 07                      bne     doneinc
2296 c7                         clrb
2297 42                         inca
2298 81 06                      cmpa    #6
229a 26 01                      bne     doneinc
229c 87                         clra
229d 6c 02              doneinc: std    2,x		; condition code will be Z=1 if hour to be incremented
229f 3d                         rts
                        
22a0                    incrementH:			; increment the hour value
                        				; X has address of buffer for time display or alarm display
22a0 ec 00                      ldd     0,x
22a2 52                         incb
22a3 c1 0a                      cmpb    #10
22a5 26 02                      bne     chk24
22a7 c7                         clrb
22a8 42                         inca
22a9                    chk24:  
                        #ifdef  AMPM
22a9 8c 01 02                   cpd     #$0102          ; 12 - toggle AMPM
22ac 26 0a                      bne     not12
22ae 36                         psha
22af a6 04                      ldaa    4,x             ; get AMPM indicator
22b1 88 80                      eora    #$80            ; toggle it
22b3 6a 04                      staa    4,x
22b5 32                         pula
22b6 20 08                      bra     doneinch
22b8 8c 01 03           not12:  cpd     #$0103          ; 13 -- make it 1
22bb 26 03                      bne     doneinch
22bd cc 00 01                   ldd     #$1
                        #else
                                cpd     #$0204
                                bne     doneinch
                                ldd     #0
                        #endif
22c0 6c 00              doneinch: std   0,x
22c2 3d                         rts
                        
22c3 0e 0d 0b 07        dspmap: db      $0e,$0d,$0b,$07
                        
                        #ifdef STATICVECTORS
3e64                            org     UserTimerCh5
3e64 20 b5                      dw      timer5
3e62                            org     UserTimerCh6
3e62 20 c0                      dw      timer6
3e60                            org     UserTimerCh7
3e60 21 10                      dw      timer7
                        #endif
                                end

Executed: Sun Jul 01 09:45:57 2007
Total cycles: 870, Total bytes: 717
Total errors: 0, Total warnings: 0
